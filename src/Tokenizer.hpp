#pragma once

#include <vector>

#include "DynamicString.hpp"
#include "Exporting.hpp"
#include "TokenEnums.hpp"

const char* tokenTypeToString(TokenType type);

struct Token
{
	TokenType type;
	// Only non-empty if type is ambiguous
	DynamicString contents;

	// The origin of this token, for debugging etc.
	// This is a filename for handwritten code, and something else for macro-generated tokens
	const char* source;
	// Starting at 1, because no text editor starts at "line 0"
	unsigned int lineNumber;
	// Includes quotation marks of strings. \t etc. only count as 1 column
	int columnStart;
	// Exclusive, e.g. line with "(a" would have start 0 end 1, the 'a' would have start 1 end 2
	int columnEnd;
};

typedef std::vector<Token> TokenArray;

void destroyToken(Token* token);

// Source should be the filename for handwritten code
// Note that this function may access tokens in tokensOut in the case of multi-line string appending
// Returns nullptr if no errors, else the error text
const char* tokenizeLine(const char* inputLine, const char* source, unsigned int lineNumber,
                         TokenArray& tokensOut);
// Invocations of this are generated by TokenizePushGenerator()
CAKELISP_API bool tokenizeLinePrintError(const char* inputLine, const char* source,
                                         unsigned int lineNumber, TokenArray& tokensOut);

bool validateTokens(const TokenArray& tokens);

CAKELISP_API void printFormattedToken(FILE* fileOut, const Token& token);
CAKELISP_API void printTokens(const TokenArray& tokens);
CAKELISP_API void prettyPrintTokens(const TokenArray& tokens);
void prettyPrintTokensToFile(FILE* file, const TokenArray& tokens);

bool writeCharToBufferErrorToken(char c, char** at, char* bufferStart, int bufferSize,
                                 const Token& token);
CAKELISP_API bool writeStringToBufferErrorToken(const char* str, char** at, char* bufferStart,
                                                int bufferSize, const Token& token);
CAKELISP_API bool appendTokenToString(const Token& token, char** at, char* bufferStart,
                                      int bufferSize);

extern CAKELISP_API int g_totalLinesTokenized;
